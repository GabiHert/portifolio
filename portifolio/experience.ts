export const experience = {
  e1: "<h1> AWS Step Functions</h1> <h3>Accomplished a study about AWS Step Functions, followed by a technical presentation to the company's engineering team. Besides the study, were developed a POC with the responsibility to notify via slack if a given account is blocked or not.</h3>",
  e2:"<h1>  GRPC  </h1>  <h3>GRPC with Node.js and AWS Study. Where accomplished a study and a POC with local execution for the uses of GRPC integrated with AWS. </h3>",
  e3:"<h1>  Messenger Service  </h1>  <h3>Development of a messenger module with formatted messages. The project is an API responsible for creating/deleting/updating/scheduling messengers. The messengers request an URL defined in its configuration. With the API response, the messengers build a message according to a template configured by the user. Within its settings, it's possible to set the messenger outputs. The outputs are a filter to the final message sent to an SNS topic, allowing the message to be routed. Furthermore, it's possible to set an execution routine such as once, daily, weekly, monthly, yearly, or personalized. All that is within a period between a start and an end date specified by the user.</h3>",
  e4:"<h1>  Python Project Refactor  </h1>  <h3>Refactor a Python API following the Clean Architecture and SOLID principles.</h3>",
  e5:"<h1>  Node.js Lib  </h1>  <h3>Development of a Node.js library responsible for mocking environment variables. this project was developed to facilitate the mocks accomplished by the QA team. By using this library developers would allow QA to modify environment variables in real time in the development and homologation cloud environments. That way it's possible to apply several mocks during tests.</h3>",
  e6:"<h1>  Financial Transactions Status Message Forwarding  </h1>  <h3>Adjust the message forwarding to registered clients about the status of their financial transactions. Before this adjustment, the message forwarding was done in parallel with its processing, causing eventual outdated messages. This implementation consisted in adding the needed logic to forward the received messages from the database updater module to a topic, allowing other applications to subscribe, and starting to receive messages after the updates performed on the database.</h3>",
  e7:"<h1>  Financial Transactions Status Filter </h1>  <h3>Implementation of a filter of financial transactions by their status during queries. Before clients couldn't know exactly which transactions were in which status, other than performing a date filter during the request. For that reason, were added filters by status during the API query on its financial transactions listing endpoint. Besides that, all the unit tests from this change were added. </h3>",
  e8:"<h1>  Financial Transactions Monitor </h1>  <h3>Development of a module of general applications monitoring. This module was developed to get a better analysis of eventual internal failure or intermittence. Through an API the user can register a monitor configuration so it can perform a request to a second API and, depending on its response, a message will be published to a topic with its specific attributes, allowing it to be filtered from its clients. The API response is processed through a message processor. The processor uses a configuration established by the user, specifying several occurrences that, in the end, will have a true or false value. In the end, all occurrences are subjected to a logic operator established by the user. This final value defines if the final message will be forwarded with its results. Each occurrence has a comparison operator, a path to be gone through in the performed request's response and a value to be compared. That way we can interpret the request's response. </h3>",
};
